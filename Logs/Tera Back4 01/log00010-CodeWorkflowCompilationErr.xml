<?xml version="1.0" encoding="utf-8"?><log event="CodeWorkflowCompilationErr" loginGuid="b1b22cde-a14c-4dde-9f97-17df7bff81a7" userId="4" userName="Administrator" xmlns="http://www.teradp.com/schemas/GN4/1/Log.xsd"><description>Error compiling workflow 'obj7731307.importWF' loaded from object with id 7731307</description><error code="1043" name="WFCompilationErrors">Warning BC42105: Function 'ProcessOffice' doesn't return a value on all code paths. A null reference exception could occur at run time when the result is used. Line:
      If data Is Nothing Or xmp Is Nothing Then Exit Function
, Error BC30451: 'typography' is not declared. It may be inaccessible due to its protection level. Line:
                  CreateArticle(mergedXmlText, crossWordName, True, folderPath, findImgResult.IdsOut,textFormat,typography,title)
, Error BC30451: 'typography' is not declared. It may be inaccessible due to its protection level. Line:
                  CreateArticle(crossWordTText, crossWordName, True, folderPath, findImgResult.IdsOut,textFormat,typography,title)
, Error BC30451: 'typography' is not declared. It may be inaccessible due to its protection level. Line:
                CreateArticle(crossWordTText, crossWordName, True, folderPath, findImgResult.IdsOut,textFormat,typography,title)
, Error BC30451: 'typography' is not declared. It may be inaccessible due to its protection level. Line:
                  CreateArticle(solutionTText, solutionName, True, folderPath, findArticleImgResult.IdsOut,textFormat,typography,title)
, Error BC30451: 'typography' is not declared. It may be inaccessible due to its protection level. Line:
                  CreateArticle(mergedXmlText, solutionName, True, folderPath, findArticleImgResult.IdsOut,textFormat,typography,title)
, Error BC30451: 'typography' is not declared. It may be inaccessible due to its protection level. Line:
                CreateArticle(solutionTText, solutionName, True, folderPath, Nothing,textFormat,typography,title)
 (ERR1043)</error><xml><sourceCode xmlns="">Option Explicit On
Option Strict On
Option Compare Binary
Option Infer On

Imports Microsoft.VisualBasic
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.Diagnostics
Imports System.Linq
Imports System.Threading.Tasks
Imports System.Xml
Imports System.Xml.Linq
Imports System.Xml.XPath
Imports System.Xml.Xsl
Imports TeraDP.GN4.Server
Imports TeraDP.GN4.Server.CodeActivity
Imports System.IO
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Crosswords_30_Min
Imports Crosswords_10_Min

Public Class SequentialWorkflow
  Private Context As SequentialExecutionContext
  Private Utils As TeraDP.GN4.Workflow.WFUtils
  Private Sub New(ByVal aContext As SequentialExecutionContext)
    Context = aContext
    Utils = New TeraDP.GN4.Workflow.WFUtils(aContext)
  End Sub
  Public Shared Sub __Execute(ByVal aContext As SequentialExecutionContext)
    Dim wf As New SequentialWorkflow(aContext)
    wf.__Do()
  End Sub

'accepted file types
  Enum FileType
    unknown
    image
    audio
    video
    office
    pdf
    text
  End Enum


  Sub ProcessPDF(data As TeraDP.GN4.Workflow.IActivityData, xmp As XDocument, filesNumber As Integer, createImg As Boolean)
    If data Is Nothing Or xmp Is Nothing Then Return


    'extract the text from file: return a XML document as binary file
    Dim readAct As TransformData = New TransformData(Context) With {.Name = "readContentFromPdf"}
    readAct.Data = data

    Dim step1 As TeraDP.GN4.Common.Step = New TeraDP.GN4.Common.Step()
    step1.Conversion = "ReadText"
    'requested text format: xml, html, text or autodetect
    step1.Parameters.Add("text")

    readAct.Steps.Add(step1)
    Dim readRes As TransformDataResult = readAct.Do()

    'move the binary file to a XML document because TransformXml needs a XML
    Dim toXmlAct As LoadXml = New LoadXml(Context) With {.Name = "contentPdfToXml"}
    toXmlAct.Data = readRes.DataOut
    Dim toXmlRes As LoadXmlResult = toXmlAct.Do()

    'insert the textual content into the XMP file to import
    Dim completeXmpAct As TransformXml = New TransformXml(Context) _
          With {.Name = "completeOfficeXmp", .Description = "Preparing XMP info..."}
    completeXmpAct.XmlIn = xmp
    'read the textual content
    completeXmpAct.Pars.Add("richText", toXmlRes.XmlOut)

    'stylesheet that appends the textual content to the PDF metadata
    completeXmpAct.Xslt =
          &lt;xsl:stylesheet version="1.0"
            xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
            xmlns:gn4="urn:schemas-teradp-com:gn4tera"
            xmlns:lc="http://www.teradp.com/schemas/GN4/1/LoginContext.xsd"
            xmlns:fn="http://www.teradp.com/schemas/GN4/1/Xslt"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"&gt;
            &lt;xsl:param name="pars"/&gt;
            &lt;xsl:template match="@*|node()"&gt;
              &lt;xsl:copy&gt;
                &lt;xsl:apply-templates select="@*|node()"/&gt;
                &lt;xsl:if test="name(.)='rdf:RDF'"&gt;
                  &lt;gn4:richText&gt;
                    &lt;xsl:copy-of select="$pars/*/add[@key='richText']/*/richTextPlain/node()"/&gt;
                  &lt;/gn4:richText&gt;
                &lt;/xsl:if&gt;
              &lt;/xsl:copy&gt;
            &lt;/xsl:template&gt;
          &lt;/xsl:stylesheet&gt;
    Dim completeXmpRes As TransformXmlResult = completeXmpAct.Do()

    'completeXmpRes.XmlOut

  End Sub

  Function GetFileTypeList(ByRef allowedString As String) As List(Of FileType)
    Dim allowedFileTypes As List(Of FileType) = New List(Of FileType)()
    Dim cleanString As String = String.Empty

    If Not String.IsNullOrEmpty(allowedString) Then
      Dim fTypeList As String() = allowedString.ToLower().Split({","c}, StringSplitOptions.RemoveEmptyEntries)
      If fTypeList IsNot Nothing Then
        For Each fType As String In fTypeList
          Dim token As String = fType.Trim()
          If Not String.IsNullOrEmpty(token) Then
            If FileType.IsDefined(GetType(FileType), token) Then
              allowedFileTypes.Add(CType([Enum].Parse(GetType(FileType), token), FileType))
              cleanString &amp;= token &amp; ", "
            Else
              Utils.LogWarning(String.Format("The file type '{0}' is not valid", token))
            End If
          End If
        Next
        allowedString = cleanString.TrimEnd(New Char() {","c, " "c})
      End If
    End If
    Return allowedFileTypes
  End Function

  Class FileToProcess
    Public data As TeraDP.GN4.Workflow.IActivityData
    Public xmp As XDocument
  End Class
  Function CheckDuplicate(ArticleName As String, FolderPath As String) As Boolean
    Dim findDuplicate As Search = New Search(Context) With {.Name = "SearchArticle", .Description = "Checking article [" &amp; ArticleName &amp; "]  already exists in [" &amp; FolderPath &amp; "]"}
    findDuplicate.Pars.Add("articleName", ArticleName)
    findDuplicate.Pars.Add("folderPath", FolderPath)
    findDuplicate.XQuery = "gn4:article[@name=$articleName and gn4:folderRef/nav:refObject/gn4:folder/@path=$folderPath]"
    Dim findDuplicateRes As SearchResult = findDuplicate.Do()
    If findDuplicateRes.IdsCount &gt; 0 Then
      Return True
    Else
      Return False
    End If
  End Function


  Sub CreateArticle(tTextElement As XElement, articleName As String, overwrite As Boolean, folderPath As String, imgIdList As IList(Of Integer),textFormat as String,typography as String,title as String)
    Dim counter As Int32
    counter = 0
    Dim tmpname As String = articleName
    If Not (overwrite) Then
      Do While CheckDuplicate(tmpname, folderPath) = True
        counter = counter + 1
        tmpname = articleName + "~" + counter.ToString()
      Loop
    End If
    articleName = tmpname
    'prepare the complete article txts node, merging the body with photoCaption elements using the provided img id list
    Dim txtsNode As XElement = New XElement("txts")
    'in this example we assume the tTextElement is an xml already compatible with a txt.tText structure:
    '  &lt;tText&gt;
    '       &lt;t:p xmlns: t = "http://www.teradp.com/schemas/GN3/t.xsd" &gt;&lt;t:tag n="mytag"/&gt;Some text&lt;/t:p&gt;
    '  &lt;/tText&gt;

    Dim bodyElement As XElement = &lt;body name=&lt;%= articleName %&gt;&gt;
                                    &lt;folderRef&gt;
                                      &lt;keyVal&gt;&lt;%= folderPath %&gt;&lt;/keyVal&gt;
                                    &lt;/folderRef&gt;
                                    &lt;%= tTextElement %&gt;
                                  &lt;/body&gt;

    Dim headElement As XElement = &lt;head name=&lt;%= articleName + ",hd" %&gt;&gt;
                                    &lt;folderRef&gt;
                                      &lt;keyVal&gt;&lt;%= folderPath %&gt;&lt;/keyVal&gt;
                                    &lt;/folderRef&gt;
                                    &lt;tText&gt;
                                      &lt;t:p xmlns:t="http://www.teradp.com/schemas/GN3/t.xsd"&gt;
                                        &lt;t:tag n="sav"/&gt;&lt;t:tag n="colname"/&gt;&lt;t:tag n="fill '.' 3pt,2"/&gt;Chess&lt;t:bell/&gt;&lt;t:tag n="res"/&gt;&lt;t:tag n="f 177"/&gt;&lt;t:tag n="grey 100"/&gt;Patrick Foley
                                              &lt;/t:p&gt;
                                    &lt;/tText&gt;
                                  &lt;/head&gt;

    'txtsNode.Add(headElement)
    txtsNode.Add(bodyElement)
    Dim i As Integer = 0
    If imgIdList IsNot Nothing Then
      For Each imgId In imgIdList
        Dim txtName As String = articleName &amp; "ph" &amp; i.ToString()
        Dim imgIdString As String = "obj" &amp; imgId
        Dim photoCaptionNode As XElement = &lt;photoCaption name=&lt;%= txtName %&gt;&gt;
                                             &lt;folderRef&gt;
                                               &lt;keyVal&gt;&lt;%= folderPath %&gt;&lt;/keyVal&gt;
                                             &lt;/folderRef&gt;
                                             &lt;tText&gt;
                                               &lt;t:p xmlns:t="http://www.teradp.com/schemas/GN3/t.xsd"&gt;
                                                 &lt;t:tag n="rem" p0="1"/&gt;&lt;t:tag n="rem" p0="0"/&gt;
                                               &lt;/t:p&gt;
                                             &lt;/tText&gt;
                                             &lt;ref idref=&lt;%= imgIdString %&gt;/&gt;
                                           &lt;/photoCaption&gt;
        txtsNode.Add(photoCaptionNode)
        i = i + 1
      Next
    End If

    Dim xArticle As XElement = &lt;objects&gt;&lt;article name=&lt;%= articleName %&gt;&gt;
                                 &lt;folderRef&gt;
                                   &lt;keyVal&gt;&lt;%= folderPath %&gt;&lt;/keyVal&gt;
                                 &lt;/folderRef&gt;
                                 &lt;authors&gt;Back4&lt;/authors&gt;
                                 &lt;title&gt;&lt;%= articleName %&gt;&lt;/title&gt;
                                 &lt;instructions&gt;&lt;/instructions&gt;
                                 &lt;%= txtsNode %&gt;
                                 &lt;/article&gt;
                                 &lt;txtGeometry name=&lt;%= Guid.NewGuid().ToString() %&gt;&gt;
                                   &lt;txtRef objectType="body"&gt;
                                     &lt;keyRef objectType="folder"&gt;
                                       &lt;keyVal&gt;&lt;%= folderPath %&gt;&lt;/keyVal&gt;
                                     &lt;/keyRef&gt;
                                     &lt;keyVal&gt;&lt;%= articleName %&gt;&lt;/keyVal&gt;
                                   &lt;/txtRef&gt;
                                   &lt;regionRef objectType="region"&gt;
                                     &lt;keyRef objectType="title"&gt;
                                       &lt;keyVal&gt;&lt;%= title %&gt;&lt;/keyVal&gt;
                                     &lt;/keyRef&gt;
                                     &lt;keyVal&gt;Print&lt;/keyVal&gt;
                                   &lt;/regionRef&gt;
                                   &lt;folderRef objectType="folder"&gt;
                                     &lt;keyVal&gt;&lt;%= folderPath %&gt;&lt;/keyVal&gt;
                                   &lt;/folderRef&gt;
                                   &lt;contextRef objectType="justContext"&gt;
                                     &lt;keyRef objectType="justScope"&gt;
                                       &lt;keyVal&gt;&lt;%= typography %&gt;&lt;/keyVal&gt;
                                     &lt;/keyRef&gt;
                                     &lt;keyVal&gt;&lt;%= textFormat %&gt;&lt;/keyVal&gt;
                                   &lt;/contextRef&gt;
                                   &lt;data/&gt;
                                   &lt;localGeometry/&gt;
                                   &lt;jumps/&gt;
                                 &lt;/txtGeometry&gt;
                               &lt;/objects&gt;

    Dim importArticle As ImportXml = New ImportXml(Context) With {.Name = "Create article", .Description = "Creating article [" &amp; articleName &amp; "]"}
    importArticle.XmlIn = New XDocument(xArticle)
    Dim importArticleRes As ImportXmlResult = importArticle.Do()
  End Sub

  Function FindArticleXml(artName As String, folderPath As String) As XElement
    FindArticleXml = Nothing
    Dim findArticle As Search = New Search(Context) With {.Name = "find existing article"}
    findArticle.XQuery = "gn4:article[@name=$artName and gn4:folderRef/nav:refObject/gn4:folder[@path=$folderPath]]"
    findArticle.Pars.Add("artName", artName)
    findArticle.Pars.Add("folderPath", folderPath)
    Dim findArticleResult As SearchResult = findArticle.Do()
    'load the article and get its current text
    If findArticleResult.IdsCount &gt; 0 Then
      Dim loadArticle As LoadObjects = New LoadObjects(Context) With {.Name = "load article"}
      loadArticle.ObjectIds = findArticleResult.IdsOut
      loadArticle.Xslt = &lt;xsl:copy-of select="gn4:txts/gn4:body/gn4:tText" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"/&gt;
      FindArticleXml = loadArticle.Do.XmlOut.Root
    End If
  End Function

  Function ProcessOffice(data As TeraDP.GN4.Workflow.IActivityData, xmp As XDocument, filesNumber As Integer) As String
    If data Is Nothing Or xmp Is Nothing Then Exit Function

    'extract the text from file: return a XML document as binary file
    Dim readAct As TransformData = New TransformData(Context) With {.Name = "readContentFromOffice"}
    readAct.Data = data

    Dim step1 As TeraDP.GN4.Common.Step = New TeraDP.GN4.Common.Step()
    step1.Conversion = "ReadText"
    'requested text format: xml, html, text or autodetect
    step1.Parameters.Add("text")

    readAct.Steps.Add(step1)
    Dim readRes As TransformDataResult = readAct.Do()

    'move the binary file to a XML document because TransformXml needs a XML
    Dim toXmlAct As LoadXml = New LoadXml(Context) With {.Name = "contentOfficeToXml"}
    toXmlAct.Data = readRes.DataOut
    Dim toXmlRes As LoadXmlResult = toXmlAct.Do()

    Dim textData As String = toXmlRes.XmlOut.Descendants("root").FirstOrDefault.Value


    'If htmlData Is Nothing Then
    '    htmlData = toXmlRes.XmlOut.Root
    'End If
    '  ImportOffice(xmp, New XDocument(htmlData), filesNumber)
    Return textData
  End Function
  Private Sub __Do()

'1. parse the file to get an xml of its metadata, including info about the mime type
    '2. based on the mime type, pass the data to a transformData activity (processoffice)
    '3. the transformdata returns an xml, or text read from th inout data
    '4. massage the output to create an xmldcoument
    '5. pass the xmldoc to an importxml activity to create the gn4 content
    Dim folderPath = Context.ParValue("folderPath")
    Dim imgFolderPath = Context.ParValue("imgFolderPath")
    Dim sourceKind = Context.ParValue("sourceKind")
    Dim title = Context.ParValue("title")
    If title = "" then 
      Utils.LogError("Please define the 'title' parameter")
      Return
    End If
    Dim region = Context.ParValue("region")
    If region = "" then 
      Utils.LogError("Please define the 'region' parameter")
      Return
    End If
    Dim textFormat = Context.ParValue("textFormat")
    If textFormat = "" then 
      Utils.LogError("Please define the 'textFormat' parameter")
      Return
    End If
    'sourceKind must be in the list:
    ' 10MinuteCrossword
    ' 20MinuteCrossword
    ' Bridge
    ' Chess
    ' Sudoku
    ' TwoSpeedCrossword


    'process the file one by one
    Dim dataList As List(Of TeraDP.GN4.Workflow.IActivityData) = New List(Of TeraDP.GN4.Workflow.IActivityData)(Context.Data)
    Dim idx As Integer = 0
    While idx &lt; dataList.Count
      Dim data As TeraDP.GN4.Workflow.IActivityData = dataList(idx)
      If Not data Is Nothing Then
        'get the file name
        Dim filename As String = data.Info.SrcName
        Try
          'extract the file metadata
          Dim parseAct As Parse = New Parse(Context) With {.Name = "parse file", .Description = "Parsing uploaded files"}
          parseAct.Data = data
          'parsing options: how to create thumbnails and xmp document
          parseAct.Options.ThumbnailSize = 120
          parseAct.Options.ThumbnailQuality = 80
          parseAct.Options.ImageMinRes = 72
          parseAct.Options.DefaultRes = 72
          parseAct.Options.PreviewSize = 0
          parseAct.Options.XmpRoot = False
          parseAct.Options.UseAttributes = False
          parseAct.Options.NoClipPreview = False
          parseAct.Options.ForceRasterize = True

          Dim parseRes As ParseResult = parseAct.Do()

          Dim xmp As XDocument = parseRes.XmlOut
          If Not parseRes.MimeOut Is Nothing Then
            'check the mime type of the uploaded file
            Dim mime As String = parseRes.MimeOut
            Dim mytext As String = ProcessOffice(data, xmp, dataList.Count)
            Dim myxmlOut As String = ""
            Select Case sourceKind
              Case "10MinuteCrossword"
                Dim xml_10_Min_Transform As Xml_Transform = New Xml_Transform()
                myxmlOut = xml_10_Min_Transform.Process(mytext)
              Case "30MinuteCrossword"
                Dim xml_30_Min_Transform As Xml_30_Min_Transform = New Xml_30_Min_Transform()
                myxmlOut = xml_30_Min_Transform.Process(mytext)
            End Select

            'Bridge Puzzle
            'Dim bridge_Transform As Xml_Bridge_Transforrm = New Xml_Bridge_Transforrm()
            'Dim myxmlOut As String = bridge_Transform.Process(mytext)

            'Dual Crossword
            'Dim dual_Transform As Xml_Dual_Transform = New Xml_Dual_Transform()
            'Dim myxmlOut As String = dual_Transform.Process(mytext)

            'Soduku Puzzle
            'Dim soduku_Transform As Xml_Soduku_Puzzle_Transform = New Xml_Soduku_Puzzle_Transform()
            'Dim myxmlOut As String = soduku_Transform.Process()

            'Dim myxmlOut As XDocument = json_30_min_transform.Processfile(mytext) 

            Dim xmlSourceTransformed As XElement = XElement.Parse(myxmlOut)
            'xmlSourceTransformed.Save("c:\temp\" &amp; data.Info.SrcName)
            Dim crossWordXml As XElement = xmlSourceTransformed.XPathSelectElement("//crossword")
            Dim crossWordName As String = crossWordXml.Attribute("id").Value()
            Dim crossWordTText As XElement = crossWordXml.XPathSelectElement("//crossword/article/tText")
            Dim solutionXml As XElement = xmlSourceTransformed.XPathSelectElement("//solution")
            Dim solutionName As String = (CInt(crossWordName) + 1).ToString()
            Dim solutionTText As XElement = xmlSourceTransformed.XPathSelectElement("//solution/article/tText")
            Dim imgName As String = crossWordXml.&lt;article&gt;.@grid

            '1 check img exists and return its id, otherwise 0
            Dim findImg As Search = New Search(Context) With {.Name = "check img exists"}
            findImg.XQuery = "gn4:img[@name=$imgName and gn4:folderRef/nav:refObject/gn4:folder[@path=$imgFolderPath]]"
            findImg.Pars.Add("imgName", imgName)
            findImg.Pars.Add("imgFolderPath", imgFolderPath)
            Dim findImgResult As SearchResult = findImg.Do()

            'load the article and get its current text, if found.
            'if not existing, the node will be empty
            Dim currrentCrossWordsXml As XElement = FindArticleXml(crossWordName, folderPath)

            If currrentCrossWordsXml IsNot Nothing Then
              If currrentCrossWordsXml.Value.Trim.StartsWith("PREVIOUS SOLUTION") Then
                Dim mergedXmlText As XElement = &lt;tText/&gt;
                mergedXmlText.Add(crossWordXml.DescendantNodes())
                mergedXmlText.Add(currrentCrossWordsXml.DescendantNodes)
                CreateArticle(mergedXmlText, crossWordName, True, folderPath, findImgResult.IdsOut,textFormat,typography,title)
              Else
                CreateArticle(crossWordTText, crossWordName, True, folderPath, findImgResult.IdsOut,textFormat,typography,title)
              End If
            Else
              CreateArticle(crossWordTText, crossWordName, True, folderPath, findImgResult.IdsOut,textFormat,typography,title)
            End If

            Dim currrentSolutionXml As XElement = FindArticleXml(solutionName, folderPath)

            If currrentSolutionXml IsNot Nothing Then
              'find the images already linked to the article, in order not to remove them when updating its structure
              Dim findArticleImg As Search = New Search(Context) With {.Name = "check img exists in existing article"}
              findArticleImg.XQuery = "gn4:img[nav:referencing/nav:referencingBy[@attrName='photoCaption.ref']/nav:refs/nav:refObject/gn4:*[starts-with(@name,$solutionName)]/gn4:folderRef/nav:refObject/gn4:folder[@path=$folderPath] and gn4:folderRef/nav:refObject/gn4:folder[@path=$imgFolderPath]]"
              findArticleImg.Pars.Add("solutionName", solutionName)
              findArticleImg.Pars.Add("folderPath", folderPath)
              findArticleImg.Pars.Add("imgName", imgName)
              findArticleImg.Pars.Add("imgFolderPath", imgFolderPath)
              Dim findArticleImgResult As SearchResult = findArticleImg.Do()
              'if the solution name exists and starts with 'repvious solution' we have to overwrite
              If currrentSolutionXml.Value.Trim.StartsWith("PREVIOUS SOLUTION") Then
                CreateArticle(solutionTText, solutionName, True, folderPath, findArticleImgResult.IdsOut,textFormat,typography,title)
              Else
                'if it does not start with that string, it contains the definitions, and we append the solutions
                Dim mergedXmlText As XElement = &lt;tText/&gt;
                mergedXmlText.Add(currrentSolutionXml.DescendantNodes())
                mergedXmlText.Add(solutionTText.DescendantNodes)
                CreateArticle(mergedXmlText, solutionName, True, folderPath, findArticleImgResult.IdsOut,textFormat,typography,title)
              End If
            Else
              CreateArticle(solutionTText, solutionName, True, folderPath, Nothing,textFormat,typography,title)
            End If



          End If
        Catch e As Exception
          Console.WriteLine(e.Message)
        End Try

      End If



      idx += 1
    End While
  End Sub
End Class
</sourceCode></xml></log>